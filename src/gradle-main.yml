# Basic jobs for building with gradle

# Disable the Gradle daemon for Continuous Integration servers as correctness
# is usually a priority over speed in CI environments. Using a fresh
# runtime for each build is more reliable since the runtime is completely
# isolated from any previous builds.
variables:
  GRADLE_OPTS: "-Dorg.gradle.daemon=false"
  REGISTRY_IMAGE_BASE: $REGISTRY_HOST/$CI_PROJECT_NAME
  REGISTRY_IMAGE_VER: $REGISTRY_HOST/$CI_PROJECT_NAME:$CI_COMMIT_TAG

before_script:
  - GRADLE_USER_HOME="$(pwd)/.gradle"
  - export GRADLE_USER_HOME

# Cache of ~/.gradle directory with dependencies etc. To be used across jobs and pipelines. 
.gradle-cache:
  image: ${GRADLE_DOCKER_IMAGE}
  cache:
    key: "gradle-cache"
    paths:
      - .gradle

# The same cache but with pull caching policy.
# Pull-only policy. No need to push the cache if we do download and dependencies.
# It is still possible this runs on a different runner than e.g. build, test so we may be actually downloading dependencies
.gradle-cache-pull:
  extends: .gradle-cache
  cache:
    policy: pull

# build the project
gradle-assemble:
  extends: .gradle-cache
  stage: build
  script:
    - java -version
    - gradle --build-cache assemble
  artifacts:
    name: "${CI_PROJECT_NAME}_${CI_COMMIT_REF_NAME}-build"
    paths:
      - build/
    expire_in: 3h

# test the project
gradle-check:
  extends: .gradle-cache
  stage: test
  script:
    - java -version
    - gradle --build-cache check
  artifacts:
    when: always
    name: "${CI_PROJECT_NAME}_${CI_COMMIT_REF_NAME}_testresults"
    paths:
      - build/reports/
    reports:
      junit: build/test-results/**/TEST-*.xml
    expire_in: 4w

# publish artifacts
gradle-publish:
  extends: .gradle-cache-pull
  stage: publish
  only:
    - tags
  script:
    - gradle --build-cache publish
