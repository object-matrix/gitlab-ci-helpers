
#
# Docker jobs to create multi-arch manifest for given git tag and manifest for 'latest' if git tag is x.y.z (semantic versioning).
# This is part of docker-publish-manifests stage.
# In addition cleanup jobs are included as part of 'docker-cleanup-images' stage

#----------
# Base jobs

.on-amd64: &on-amd64
  tags:
    - docker-amd64
  variables:
    cpuArch: "amd64"

.on-arm64: &on-arm64
  tags:
    - docker-arm64
  variables:
    cpuArch: "arm64"

# Checks SKIP_ARM64 variable and changes armImageName script variable to empty instead of $REGISTRY_IMAGE_VER-arm64
# This is useful to exclude arm64 from manifests in scripts etc.
.arm64-image-name-check: &arm64-image-name-check
  arm64ImageName=$([ "${SKIP_ARM64:-}" = "true" ] || [ "${SKIP_ARM64:-}" = "yes" ] && echo "" || echo "$REGISTRY_IMAGE_VER-arm64")
  
.docker-job:
  image: docker:24-cli
  variables:
    # does not use source code
    GIT_STRATEGY: none
  # disabled as it forces external script to explicitly declare dependencies again
  # by default Gitlab shares artificats between jobs so keep it that way
  # dependencies: []
  only:
    - tags

.docker-auth-job:
  extends: .docker-job
  before_script:      
    - |
      skipLogin=0
      decodeAuthConfig=0
      if [ -n "${REGISTRY_USERNAME:-}" ] && [ -n "${REGISTRY_PASSWORD:-}" ]; then
        # will use username and password environment variables indirectly
        :
      elif [ -n "${DOCKER_AUTH_CONFIG:-}" ]; then
        decodeAuthConfig=1
      else
        # assume authenticated already in some other way 
        skipLogin=1
      fi

      if [ $decodeAuthConfig -eq 1 ]; then
        # extract from DOCKER_AUTH_CONFIG
        REGISTRY_AUTH=$(echo "$DOCKER_AUTH_CONFIG" | tr -d '\n' | tr -d '[[:space:]]' | sed -n -E 's/.*"'$REGISTRY_HOST'":\{"auth":"([^"]+)".*/\1/p')
        DECODED_AUTH=$(echo "$REGISTRY_AUTH" | base64 -d 2>/dev/null)
        export REGISTRY_USERNAME=$(echo "$DECODED_AUTH" | cut -d':' -f1)
        export REGISTRY_PASSWORD=$(echo "$DECODED_AUTH" | cut -d':' -f2)
      fi
      
      if [ $skipLogin -eq 0 ]; then
        echo "${REGISTRY_PASSWORD}" | docker login --username "${REGISTRY_USERNAME}" --password-stdin "${REGISTRY_HOST}";
      fi

#----------
# Create manifest
# Create docker manifest list for tag :version
create-manifest:
  stage: docker-publish-manifests
  extends: .docker-auth-job
  script:
    - *arm64-image-name-check
    - docker manifest create --insecure $REGISTRY_IMAGE_VER $REGISTRY_IMAGE_VER-amd64 $arm64ImageName
    - docker manifest push --insecure --purge $REGISTRY_IMAGE_VER

#----------
# Create tag :latest

# Create docker manifest list for tag :latest
create-latest-tag:
  stage: docker-publish-manifests
  extends: .docker-auth-job
  only:
    # Checking the format of the Git tag is the only thing that works
    # We cannot check for example if the tag is on the master branch
    - /^\d+\.\d+\.\d+$/
  script:
    - *arm64-image-name-check
    - docker manifest create --insecure $REGISTRY_IMAGE_BASE:latest $REGISTRY_IMAGE_VER-amd64 $arm64ImageName
    - docker manifest push --insecure --purge $REGISTRY_IMAGE_BASE:latest

#----------
# Cleanup

# Remove docker image for amd64
cleanup-amd64:
  <<: *on-amd64
  extends: .remove-image-base

## Remove docker image for arm64
cleanup-arm64:
  <<: *on-arm64
  extends: .remove-image-base

# Base task for removing built Docker image
.remove-image-base:
  extends: .docker-job
  stage: docker-cleanup-images
  script:
    - docker image rm -f $REGISTRY_IMAGE_VER-$cpuArch
