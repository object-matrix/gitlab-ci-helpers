
#---------------------------------------
# Docker jobs

#----------
# Base jobs

.on-amd64: &on-amd64
  tags:
    - docker-amd64
  variables:
    cpuArch: "amd64"

.on-arm64: &on-arm64
  tags:
    - docker-arm64
  variables:
    cpuArch: "arm64"

.docker-job:
  image: docker:24-cli
  variables:
    # does not use source code
    GIT_STRATEGY: none
  dependencies: []
  only:
    - tags

    # - |
    #   skipLogin=false
    #   if [ -n "${REGISTRY_USERNAME:-}" ] && [ -n "${REGISTRY_PASSWORD:-}" ]; then
    #     # use environment variable credentials directly
    #     :
    #   elif [ -n "${DOCKER_AUTH_CONFIG:-}" ]; then
    #     # extract credentials from DOCKER_AUTH_CONFIG
    #     REGISTRY_AUTH=$(echo "$DOCKER_AUTH_CONFIG" | grep -A 1 "\"$REGISTRY_HOST\"" | grep '"auth"' | awk -F'"' '{print $4}')
    #     DECODED_AUTH=$(echo "$REGISTRY_AUTH" | base64 -d 2>/dev/null)
    #     export REGISTRY_USERNAME=$(echo "$DECODED_AUTH" | cut -d':' -f1)
    #     export REGISTRY_PASSWORD=$(echo "$DECODED_AUTH" | cut -d':' -f2)
    #   else
    #     # assume no need to authenticate
    #     skipLogin=true
    #   fi
.docker-auth-job:
  extends: .docker-job
  before_script:      
    - |
      skipLogin=0
      decodeAuthConfig=0
      if [ -n "${REGISTRY_USERNAME:-}" ] && [ -n "${REGISTRY_PASSWORD:-}" ]; then
        # will use username and password environment variables indirectly
        :
      elif [ -n "${DOCKER_AUTH_CONFIG:-}" ]; then
        decodeAuthConfig=1
      elif [ -n "${DOCKER_AUTH_CONFIG_BASE64:-}" ]; then
        DOCKER_AUTH_CONFIG=$(echo "$DOCKER_AUTH_CONFIG_BASE64" | base64 -d)
        export DOCKER_AUTH_CONFIG
        decodeAuthConfig=1
      else
        # assume authenticated already in some other way 
        skipLogin=1
      fi

      if [ $decodeAuthConfig -eq 1 ]; then
        # extract from DOCKER_AUTH_CONFIG
        # REGISTRY_AUTH=$(echo "$DOCKER_AUTH_CONFIG" | grep -A 1 "\"$REGISTRY_HOST\"" | grep '"auth"' | awk -F'"' '{print $4}')
        REGISTRY_AUTH=$(echo "$DOCKER_AUTH_CONFIG" | tr -d '\n' | tr -d '[[:space:]]' | sed -n -E 's/.*"'$REGISTRY_HOST'":\{"auth":"([^"]+)".*/\1/p')
        DECODED_AUTH=$(echo "$REGISTRY_AUTH" | base64 -d 2>/dev/null)
        export REGISTRY_USERNAME=$(echo "$DECODED_AUTH" | cut -d':' -f1)
        export REGISTRY_PASSWORD=$(echo "$DECODED_AUTH" | cut -d':' -f2)
      fi
      
      if [ $skipLogin -eq 0 ]; then
        echo "${REGISTRY_PASSWORD}" | docker login --username "${REGISTRY_USERNAME}" --password-stdin "${REGISTRY_HOST}";
      fi

#----------
# Create manifest
# Create docker manifest list for tag :version
create-manifest:
  stage: docker-publish-manifests
  extends: .docker-auth-job
  script:
    - docker manifest create --insecure $REGISTRY_IMAGE_VER $REGISTRY_IMAGE_VER-amd64 $REGISTRY_IMAGE_VER-arm64
    - docker manifest push --insecure --purge $REGISTRY_IMAGE_VER

#----------
# Create tag :latest

# Create docker manifest list for tag :latest
create-latest-tag:
  stage: docker-publish-manifests
  extends: .docker-auth-job
  only:
    # Checking the format of the Git tag is the only thing that works
    # We cannot check for example if the tag is on the master branch
    - /^\d+\.\d+\.\d+$/
  script:
    - docker manifest create --insecure $REGISTRY_IMAGE_BASE:latest $REGISTRY_IMAGE_VER-amd64 $REGISTRY_IMAGE_VER-arm64
    - docker manifest push --insecure --purge $REGISTRY_IMAGE_BASE:latest

#----------
# Cleanup

# Remove docker image for amd64
cleanup-amd64:
  <<: *on-amd64
  extends: .remove-image-base

## Remove docker image for arm64
cleanup-arm64:
  <<: *on-arm64
  extends: .remove-image-base

# Base task for removing built Docker image
.remove-image-base:
  extends: .docker-job
  stage: docker-cleanup-images
  script:
    - docker image rm -f $REGISTRY_IMAGE_VER-$cpuArch
